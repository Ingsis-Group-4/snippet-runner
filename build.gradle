import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.23'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.23'
	id 'jacoco'
	id "de.undercouch.download" version "5.3.0"
}

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	ktlint
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/Ingsis-Group-4/printscript")
		credentials {
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	ktlint("com.pinterest.ktlint:ktlint-cli:1.2.1") {
		attributes {
			attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
		}
	}
	implementation 'printscript:common:0.1.1'
	implementation 'printscript:interpreter:0.1.1'
	implementation 'printscript:parser:0.1.1'
	implementation 'printscript:lexer:0.1.1'
	implementation 'printscript:utils:0.1.1'
	implementation 'printscript:runner:0.1.1'
	implementation 'printscript:formatter:0.1.1'
	implementation 'printscript:sca:0.1.1'

	implementation("com.newrelic.agent.java:newrelic-agent:7.2.0")

	implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.5.0"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0"
}

tasks.register("checkLint", JavaExec) {
	group = "verification"
	description = "Check Kotlin code style."
	classpath = configurations.ktlint
	mainClass = "com.pinterest.ktlint.Main"
	args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.named("check") {
	dependsOn tasks.named("checkLint")
}

tasks.register("lint", JavaExec) {
	group = "formatting"
	description = "Fix Kotlin code style deviations."
	classpath = configurations.ktlint
	mainClass = "com.pinterest.ktlint.Main"
	jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"
	args "-F", "src/**/*.kt", "**.kts", "!**/build/**"
}

task installGitHooks(type: Copy) {
	from new File(rootProject.rootDir, 'hooks/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
}

task setupNewrelic(type: Download) {
	mkdir 'newrelic'
	src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
	dest file('newrelic/newrelic-java.zip')
	doLast {
		copy {
			from zipTree(file('newrelic/newrelic-java.zip'))
			into rootDir
		}
	}
}

build.dependsOn installGitHooks

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '21'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
